## model_of_vulnerability.rb
$VULNERABILITYDB="imsafe"

module ModelOfVulnerability
	require './my_dbconnect'

	def db_get_funcid_by_funcname(_func_name='')
		if _func_name == ''
			raise ArgumentError, "#{__FILE__}, #{__LINE__}, params _func_name error"
		else
			tquery = DbConnect.new("#{$VULNERABILITYDB}")
			tquery.with_db do |db|
				db.query("select Func_id from function where Func_name='#{_func_name}';") do |res|
					res.each_hash do |hash|
						hash.each do |k, v|
							return v
						end
					end
				end
			end
			return 0
		end
	end
	def db_get_valueid_by_funcid(_func_id=0)
		if _func_id == ''
			raise ArgumentError, "#{__FILE__}, #{__LINE__}, params _func_id error"
		else
			res_tem = Array.new
			tquery = DbConnect.new("#{$VULNERABILITYDB}")
			tquery.with_db do |db|
				db.query("select Value_id from func_value_relation where Func_id='#{_func_id}';") do |res|
					res.each_hash do |hash|
						hash.each do |k, v|
							res_tem << v
						end
					end
					res_tem
				end
			end
		end
	end
	def db_get_value_by_valueid(_value_id=0)
		if _value_id == ''
			raise ArgumentError, "#{__FILE__}, #{__LINE__}, params _value_id error"
		else
			tquery = DbConnect.new("#{$VULNERABILITYDB}")
			tquery.with_db do |db|
				db.query("select Value_id,Value,Value_class from value_of_func where Value_id=#{_value_id};") do |res|
					res.each_hash do |hash|
						return {'value' => hash['Value'], 'value_class' => hash['Value_class'], 'value_id' => hash['Value_id']}
					end
				end
			end
			return ''
		end
	end

	# deal with opensipstackdb.opensips_1_10_funcs_table
	def db_get_info_of_funcname(_func_name='')
		if _func_name == ''
			raise ArgumentError, "#{__FILE__}, #{__LINE__}, params _func_name error"
		else
			res_tem = Array.new
			tquery = DbConnect.new("opensipstackdb")
			tquery.with_db do |db|
				db.query("select * from opensips_1_10_funcs_table where sub_function_list like '%#{_func_name}%'") do |res|
					res.each_hash do |hash|
						res_tem << {'file_name' => hash['file_name'], 'function_name' => hash['function_name']}
					end
				end
			end
			res_tem
		end
	end

	def test_table_in_mysql(_table_name)
		tquery = DbConnect.new("#{$VULNERABILITYDB}")
		tquery.with_db do |db|
			db.query('show tables;') do |res|
				_exist = 0
				res.each_hash do |hash|
					hash.each do |k, v| 
						#puts "#{k} : #{v} : #{_table_name}"
						if v == "#{_table_name}"
							_exist = 1
						end
					end
				end
				return _exist
			end
		end
	end
	def test_file_in_mysql(_files_table="", _file_name="")
		if _files_table == "" || _file_name == ""
			raise ArgumentError, "#{__FILE__}, #{__LINE__}, params error"
		end
		tquery = DbConnect.new("#{$VULNERABILITYDB}")
		tquery.with_db do |db|
			db.query("select * from #{_files_table};") do |res|
				_file_exist = 0
				res.each_hash do |hash|
					hash.each do |k, v|
						#puts "#{k} : #{v}"
						if v == _file_name
							_file_exist = 1
						end
					end
				end
				_file_exist
			end
		end
	end

	def insert_file_to_mysql(params)
		sip_stack_name = params[:sip_stack_name]
		file_name = params[:file_name]
		function_list = params[:function_list]
		drop_table = params[:drop_table]
		file_headers = params[:file_headers]
		file_base_path = params[:file_base_path]
		sip_header_from_file = params[:sip_header_from_file]
		sip_header_from_file_content = params[:sip_header_from_file_content]

		files_table = "#{sip_stack_name}_files_table"
		tquery = DbConnect.new("#{$VULNERABILITYDB}")
		#debug_puts "insert into #{files_table}(file_name) values (\"#{file_name}\", \"#{function_list}\");"
		tquery.with_db do |db|
			db.query("insert into #{files_table}(file_name, function_list, file_headers, file_base_path, sip_header_from_file, sip_header_from_file_content) 
					values (\'#{file_name}\', \'#{function_list}\', \'#{file_headers}\', \'#{file_base_path}\', \'#{sip_header_from_file}\', \'#{sip_header_from_file_content}\');") do |res|
			end
		end
	end
	def write_file_to_mysql(params)
		sip_stack_name = params[:sip_stack_name]
		file_name = params[:file_name]
		function_list = params[:function_list]
		drop_table = params[:drop_table]
		if sip_stack_name == "" || file_name == ""
			raise ArgumentError, "#{__FILE__}, #{__LINE__}, params error"
		end
		_table_exist = 0
		files_table = "#{sip_stack_name}_files_table"
		funcs_table = "#{sip_stack_name}_funcs_table"
		#puts files_table
		if drop_table == 1
			drop_table_mysql(files_table)
			create_table_mysql(files_table)
			drop_table_mysql(funcs_table)
			create_table_mysql(funcs_table)
		end
		_table_exist = test_table_in_mysql(files_table)
		#p _table_exist
		if _table_exist == 1
			_file_exist = test_file_in_mysql(files_table, file_name)
			if _file_exist == 1
				#raise StandardError, "#{__FILE__}, #{__LINE__}, params error"
				log()
			else
				insert_file_to_mysql(params)
			end
		else
			raise StandardError, "#{__FILE__}:#{__LINE__}:create_table error"
			# create_table_mysql(files_table)
		end
	end
	def test_sub_funcs_in_mysql(funcs_table, file_name, function_name)
		if funcs_table == "" || file_name == ""
			raise ArgumentError, "#{__FILE__}, #{__LINE__}, params error"
		end
		tquery = DbConnect.new("#{$VULNERABILITYDB}")
		tquery.with_db do |db|
			db.query("select * from #{funcs_table} where file_name='#{file_name}' and function_name='#{function_name}';") do |res|
				_file_exist = 0
				res.each_hash do |hash|
					hash.each do |k, v|
						#puts "#{k} : #{v}"
						if v == file_name
							_file_exist = 1
						end
					end
				end
				_file_exist
			end
		end
	end
	def select_file_name_from_table(table, params)
		sip_stack_name = params[:sip_stack_name]
		file_name = params[:file_name]
		function_name = params[:function_name]
		tquery = DbConnect.new("#{$VULNERABILITYDB}")
		tquery.with_db do |db|
			db.query("select * from #{table} where file_name='#{file_name}'") do |res|
				res.each_hash do |hash|
					hash.each do |k, v|
						if k == "id"
							return v
						end
					end
				end
			end
		end
	end
	def insert_sub_funcs_to_mysql(params)
		sip_stack_name = params[:sip_stack_name]
		file_name = params[:file_name]
		function_name = params[:function_name]
		sub_functions_list = params[:sub_functions_list]
		sip_header_from_function = params[:sip_header_from_function]

		files_table = "#{sip_stack_name}_funcs_table"
		tquery = DbConnect.new("#{$VULNERABILITYDB}")
		#debug_puts "insert into #{files_table}(file_name) values (\"#{file_name}\", \"#{function_list}\");"
		file_id = 0
		file_id = select_file_name_from_table("#{sip_stack_name}_files_table", params)
		#p file_id
		tquery.with_db do |db|
			db.query("insert into #{files_table}(file_id, file_name, function_name, sub_function_list, sip_header_from_function) 
					values (\'#{file_id}\', \'#{file_name}\', \'#{function_name}\', \'#{sub_functions_list}\', \'#{sip_header_from_function}\');") do |res|
			end
		end
	end
	def write_sub_funcs_to_mysql(params)
		sip_stack_name = params[:sip_stack_name]
		file_name = params[:file_name]
		function_name = params[:function_name]
		sub_functions_list = params[:sub_functions_list]
		# drop_table = params[:drop_table]
		if sip_stack_name == "" || file_name == ""
			raise ArgumentError, "#{__FILE__}, #{__LINE__}, params error"
		end
		_table_exist = 0
		funcs_table = "#{sip_stack_name}_funcs_table"
		#puts files_table
		_table_exist = test_table_in_mysql(funcs_table)
		#p _table_exist
		if _table_exist == 1
			_functions_exist = test_sub_funcs_in_mysql(funcs_table, file_name, function_name)
			if _functions_exist == 1
				#raise StandardError, "#{__FILE__}, #{__LINE__}, params error"
				log()
			else
				insert_sub_funcs_to_mysql(params)
			end
		else
			raise StandardError, "#{__FILE__}:#{__LINE__}:create_table error"
			# create_table_mysql(files_table)
		end
	end
end